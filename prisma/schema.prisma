generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  decks         Deck[]
  tags          Tag[]
  categories    Category[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Deck {
  id            String      @id @default(cuid())
  name          String
  description   String?
  userId        String
  categoryId    String?
  currentStreak Int         @default(0)
  lastStudied   DateTime?
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  category      Category?   @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  flashcards    Flashcard[]
  tags          Tag[]       @relation("DeckTags")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([userId])
  @@index([categoryId])
}

model Flashcard {
  id         String     @id @default(cuid())
  front      String
  back       String
  difficulty Difficulty @default(MEDIUM)
  deckId     String
  deck       Deck       @relation(fields: [deckId], references: [id], onDelete: Cascade)
  progress   Progress[]
  tags       Tag[]      @relation("FlashcardTags")
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([deckId])
  @@index([difficulty])
}

model Progress {
  id           String      @id @default(cuid())
  flashcardId  String
  flashcard    Flashcard   @relation(fields: [flashcardId], references: [id], onDelete: Cascade)
  status       CardStatus  @default(NEW)
  easeFactor   Float       @default(2.5)
  interval     Int         @default(1)
  repetitions  Int         @default(0)
  nextReview   DateTime    @default(now())
  lastReviewed DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@unique([flashcardId])
  @@index([nextReview])
}

model Tag {
  id         String      @id @default(cuid())
  name       String
  color      String      @default("#3b82f6")
  userId     String
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  decks      Deck[]      @relation("DeckTags")
  flashcards Flashcard[] @relation("FlashcardTags")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@unique([name, userId])
  @@index([userId])
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String   @default("#10b981")
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  decks       Deck[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([name, userId])
  @@index([userId])
}

enum CardStatus {
  NEW
  LEARNING
  REVIEW
  LEARNED
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}